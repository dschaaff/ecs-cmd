#!/usr/bin/env ruby
require 'gli'
require 'ecs_cmd'
include GLI::App
include EcsCmd
program_desc 'Command utility for interacting with AWS ECS'

version EcsCmd::VERSION

subcommand_option_handling :normal
arguments :strict

desc 'Describe some switch here'
switch %i[s switch]

desc 'Set the aws region'
default_value 'us-east-1'
arg_name 'region'
flag %i[r region]

desc 'Get Info '
command :get do |c|
  c.command :clusters do |clusters|
    clusters.desc 'list ecs clusters'
    clusters.action do |global_options, _options, _args|
      clust = EcsCmd::Clusters.new(global_options[:region])
      clust.list_clusters
    end
  end

  c.arg_name '<cluster>'
  c.command :services do |services|
    services.desc 'list services in a given ecs cluster'
    services.action do |global_options, _options, args|
      serv = EcsCmd::Services.new(global_options[:region])
      serv.list_services(args[0])
    end
  end

  c.arg_name '<service> <cluster'
  c.command :service do |service|
    service.default_desc 'get info about an ecs service'
    service.switch %i[e events], desc: 'get ecs events', default_value: false
    service.switch %i[t task_definition], desc: 'get current task definition for service', default_value: false
    service.action do |global_options, options, args|
      if options[:events] == false && options[:task_definition] == false
        EcsCmd::Service.new(args[1], args[0], global_options[:region]).list_service
      elsif options[:events] == true
        EcsCmd::Service.new(args[1], args[0], global_options[:region]).events
      else
        EcsCmd::TaskDefinition.new(EcsCmd::Service.new(args[1], args[0], global_options[:region]).task_definition).print_json
      end
    end
  end
end

# desc 'Add description here'
# arg_name 'Describe arguments here'
# command :get do |c|
#   c.action do |global_options, options, args|
#     if args[0] == 'task_definition'
#       task = EcsCmd::TaskDefinition.new(args[1])
#       puts JSON.pretty_generate(JSON[task.json])
#     elsif
#       puts "not implemented"
#     end
#   end
# end

desc 'Describe add here'
arg_name 'Describe arguments to add here'
command :add do |c|
  c.action do |_global_options, _options, _args|
    puts 'add command ran'
  end
end

# desc 'Describe complete here'
# arg_name 'Describe arguments to complete here'
# command :complete do |c|
#   c.action do |global_options,options,args|
#     puts "complete command ran"
#   end
# end

pre do |_global, _command, _options, _args|
  # Pre logic here
  # Return true to proceed; false to abort and not call the
  # chosen command
  # Use skips_pre before a command to skip this block
  # on that command only
  true
end

post do |global, command, options, args|
  # Post logic here
  # Use skips_post before a command to skip this
  # block on that command only
end

on_error do |_exception|
  # Error logic here
  # return false to skip default error handling
  true
end

exit run(ARGV)
