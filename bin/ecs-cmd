#!/usr/bin/env ruby
require 'gli'
require 'ecs_cmd'
include GLI::App
include EcsCmd
program_desc 'Command utility for interacting with AWS ECS'

version EcsCmd::VERSION

subcommand_option_handling :normal
arguments :strict

desc 'Describe some switch here'
switch [:s,:switch]

desc 'Describe some flag here'
default_value 'the default'
arg_name 'The name of the argument'
flag [:f,:flagname]

desc 'List Items '
arg_name '<clusters> | <services>'
command :list do |c|
  c.action do |global_options,options,args|
    if args[0] == 'clusters'
      clust = EcsCmd::Clusters.new
      puts clust.list_clusters
    elsif args[0] == 'services'
      serv = EcsCmd::Services.new
      serv.list_services(args[1])
    else
      puts 'invalid arg supplied'
    end
  end
end

desc 'Describe add here'
arg_name 'Describe arguments to add here'
command :add do |c|
  c.action do |global_options,options,args|
    puts "add command ran"
  end
end

# desc 'Describe complete here'
# arg_name 'Describe arguments to complete here'
# command :complete do |c|
#   c.action do |global_options,options,args|
#     puts "complete command ran"
#   end
# end

pre do |global,command,options,args|
  # Pre logic here
  # Return true to proceed; false to abort and not call the
  # chosen command
  # Use skips_pre before a command to skip this block
  # on that command only
  true
end

post do |global,command,options,args|
  # Post logic here
  # Use skips_post before a command to skip this
  # block on that command only
end

on_error do |exception|
  # Error logic here
  # return false to skip default error handling
  true
end

exit run(ARGV)
