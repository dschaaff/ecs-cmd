#!/usr/bin/env ruby
require 'gli'
require 'ecs_cmd'
include GLI::App
include EcsCmd
program_desc 'Command utility for interacting with AWS ECS'

version EcsCmd::VERSION

subcommand_option_handling :normal
arguments :strict

desc 'Describe some switch here'
switch [:s,:switch]

desc 'Set the aws region'
default_value 'us-east-1'
arg_name 'region'
flag [:r,:region]

desc 'Get Info '
command :get do |c|
  c.command :clusters do |clusters|
    clusters.desc 'list ecs clusters'
    clusters.action do |global_options,options,args|
      clust = EcsCmd::Clusters.new(global_options[:region])
      clust.list_clusters
    end
  end
  c.arg_name '<cluster>'
  c.command :services do |services|
    services.desc 'list services in a given ecs cluster'
    services.action do |global_options, options, args|
      serv = EcsCmd::Services.new(global_options[:region])
      serv.list_services(args[0])
    end
  end
  c.arg_name '<service> <cluster'
  c.command :service do |service|
    service.desc 'get info about specific ecs services'
    service.default_desc 'get info about an ecs service'
    service.action do |global_options, options, args|
      EcsCmd::Service.new(args[1],args[0], global_options[:region]).list_service
    end
    service.arg_name '<service> <cluster>'
    service.command :events do |events|
      events.desc 'list events for service'
      events.action do |global_options, options, args|
        EcsCmd::Service.new(args[1],args[0], global_options[:region]).events
      end
    end
  end
  # c.action do |global_options,options,args|
  #   if args[0] == 'clusters'
  #     clust = EcsCmd::Clusters.new(global_options[:region])
  #     puts clust.list_clusters
  #   elsif args[0] == 'services'
  #     serv = EcsCmd::Services.new(global_options[:region])
  #     serv.list_services(args[1])
  #   elsif args[0] == 'service'
  #     serv = EcsCmd::Service.new(args[2],args[1], global_options[:region])
  #     if args[3] == 'events'
  #       serv.events
  #     else 
  #       serv.list_service
  #     end
  #   else
  #     puts 'invalid arg supplied'
  #   end
  # end
end

# desc 'Add description here'
# arg_name 'Describe arguments here'
# command :get do |c|
#   c.action do |global_options, options, args|
#     if args[0] == 'task_definition'
#       task = EcsCmd::TaskDefinition.new(args[1])
#       puts JSON.pretty_generate(JSON[task.json])
#     elsif
#       puts "not implemented"
#     end
#   end
# end

desc 'Describe add here'
arg_name 'Describe arguments to add here'
command :add do |c|
  c.action do |global_options,options,args|
    puts "add command ran"
  end
end

# desc 'Describe complete here'
# arg_name 'Describe arguments to complete here'
# command :complete do |c|
#   c.action do |global_options,options,args|
#     puts "complete command ran"
#   end
# end

pre do |global,command,options,args|
  # Pre logic here
  # Return true to proceed; false to abort and not call the
  # chosen command
  # Use skips_pre before a command to skip this block
  # on that command only
  true
end

post do |global,command,options,args|
  # Post logic here
  # Use skips_post before a command to skip this
  # block on that command only
end

on_error do |exception|
  # Error logic here
  # return false to skip default error handling
  true
end

exit run(ARGV)
