#!/usr/bin/env ruby
require 'gli'
require 'ecs_cmd'
include GLI::App
include EcsCmd
program_desc 'Command utility for interacting with AWS ECS'

version EcsCmd::VERSION

subcommand_option_handling :normal
arguments :strict

desc 'Set the aws region'
default_value ENV['AWS_DEFAULT_REGION'] || 'us-east-1'
arg_name 'region'
flag %i[r region]

desc 'Get Info on Clusters and Services'
command :get do |c|
  c.command :clusters do |clusters|
    clusters.desc 'list ecs clusters'
    clusters.action do |global_options, _options, _args|
      clust = EcsCmd::Clusters.new(global_options[:region])
      clust.list_clusters
    end
  end

  c.command :services do |services|
    services.flag %i[c cluster], desc: 'cluster name', arg_name: 'cluster', required: true
    services.desc 'list services in a given ecs cluster'
    services.action do |global_options, options, _args|
      serv = EcsCmd::Services.new(global_options[:region])
      serv.list_services(options[:cluster])
    end
  end

  c.command :service do |service|
    service.flag %i[c cluster], desc: 'cluster name', arg_name: 'cluster', required: true
    service.flag %i[s service], desc: 'service name', arg_name: 'service', required: true
    service.default_desc 'get info about an ecs service'
    service.switch %i[e events], desc: 'get ecs events', default_value: false
    service.switch %i[t task_definition], desc: 'get current task definition for service', default_value: false
    service.action do |global_options, options|
      if options[:events] == true
        EcsCmd::Service.new(options[:cluster], options[:service], global_options[:region]).events
      elsif options[:task_definition] == true
        task_def = EcsCmd::Service.new(options[:cluster], options[:service], global_options[:region]).task_definition
        EcsCmd::TaskDefinition.new(task_def, global_options[:region]).print_json
      else
        EcsCmd::Service.new(options[:cluster], options[:service], global_options[:region]).list_service
      end
    end
  end
end

desc 'Run a One Off Task On an ECS Cluster'
command :'run-task' do |c|
  c.flag %i[c cluster], desc: 'cluster name', arg_name: 'cluster', required: true
  c.flag %i[n container-name], desc: 'container name', arg_name: 'container name', required: false
  c.flag %i[t task-definition], desc: 'the task definition to use for task', required: true
  c.flag %i[i image], desc: 'docker image to use for task', arg_name: 'image', required: false
  c.flag %i[d command], desc: 'override task definition command', arg_name: 'command'
  c.action do |global_options, options, _args|
    command = options[:d].tokenize
    if options[:i]
      puts "generating new task definition with image #{options[:i]}"
      new_task = EcsCmd::TaskDefinition.new(options[:t], global_options[:region]).update_image(options[:i])
      puts "registered task definition #{new_task}"
      EcsCmd::RunTask.new(global_options[:region], options[:c], new_task, options[:n], command).run
    else
      EcsCmd::RunTask.new(global_options[:region], options[:c], options[:t], options[:n], command).run
    end
  end
end

desc 'SSH into Host Task is Running On'
command :ssh do |c|
  c.flag %i[c cluster], desc: 'cluster name', arg_name: 'cluster', required: true
  c.flag %i[s service], desc: 'service name', arg_name: 'service', required: true
  c.action do |global_options, options, args|
    ip = EcsCmd::Service.new(options[:c], options[:s], global_options[:region]).container_instance_ips[0]
    puts "opening ssh connection to  #{ip}"
    EcsCmd::Exec.ssh(ip)
  end
end

desc 'Execute a Command Within a Service\'s Container'
arg_name 'command', :required
command :exec do |c|
  c.flag %i[c cluster], desc: 'cluster name', arg_name: 'cluster', required: true
  c.flag %i[s service], desc: 'service name', arg_name: 'service', required: true
  c.action do |global_options, options, args|
    service = EcsCmd::Service.new(options[:c], options[:s], global_options[:region])
    ip = service.container_instance_ips[0]
    task_family = service.task_family
    command = args.join(' ')
    EcsCmd::Exec.execute(task_family, ip, command)
  end
end

desc "Open a Shell Inside a Service's Container"
command 'shell' do |c|
  c.flag %i[c cluster], desc: 'cluster name', arg_name: 'cluster', required: true
  c.flag %i[s service], desc: 'service name', arg_name: 'service', required: true
  c.switch %i[sh], desc: 'use sh instead of bash', default_value: false
  c.action do |global_options, options, args|
    service = EcsCmd::Service.new(options[:c], options[:s], global_options[:region])
    ip = service.container_instance_ips[0]
    task_family = service.task_family
    shell = options[:sh] ? 'sh' : 'bash'
    EcsCmd::Exec.shell(task_family, ip, shell)
  end
end

desc "Tail Logs From a Service's Container"
command 'logs' do |c|
  c.flag %i[c cluster], desc: 'cluster name', arg_name: 'cluster', required: true
  c.flag %i[s service], desc: 'service name', arg_name: 'service', required: true
  c.flag %i[l lines], desc: 'number of historical lines to tail', arg_name: 'lines', default_value: 30, required: false
  c.action do |global_options, options, args|
    service = EcsCmd::Service.new(options[:c], options[:s], global_options[:region])
    ip = service.container_instance_ips[0]
    task_family = service.task_family
    EcsCmd::Exec.logs(task_family, ip, options[:lines])
  end
end
# desc 'Describe complete here'
# arg_name 'Describe arguments to complete here'
# command :complete do |c|
#   c.action do |global_options,options,args|
#     puts "complete command ran"
#   end
# end

pre do |_global, _command, _options, _args|
  # Pre logic here
  # Return true to proceed; false to abort and not call the
  # chosen command
  # Use skips_pre before a command to skip this block
  # on that command only
  true
end

post do |global, command, options, args|
  # Post logic here
  # Use skips_post before a command to skip this
  # block on that command only
end

on_error do |_exception|
  # Error logic here
  # return false to skip default error handling
  true
end

exit run(ARGV)
